{"pages":[],"posts":[{"title":"webpack","text":"webpack四个概念： entry output loaders plugins entry:用法:123entry: { [entryChunkName: string]: string|Array&lt;string&gt;} 单页应用1234567//webpack.config.jsconst config = { entry: { main: './path/to/my/entry/file.js' }}module.export = config; 多页应用1234567const config = { entry: { pageOne: './src/pageOne/index.js', pageTwo: './src/pageTwo/index.js', pageThree: './src/pageThree/index.js' }} output :用法 : filename 指定打包后输出的文件名 path 指定打包后输出的文件的绝对路径 1234output: { filename: 'filename.js', path: '/path'} 输出文件规范打包后文件输出规范由output决定 123456789101112131415161718192021222324//全部打包输出成一个文件const config = { entry: { app: './src/file.js', search: './src/search.js' } output: { filename: bundle.js, path: '/home/proj/public/assets' //假定输出文件路径 }}// 多入口文件const config = { entry: { app: './src/app.js', search: './src/search.js' }, output: { filename: [name].js, path: '/dist', }}// output: ./dist/app.js, ./dist/search.js 高级用法静态资源使用CDN和hashes 123456output: { path: \"/home/proj/cdn/assets/[hash]\", publicPath: \"http://cdn.example.com/assets/[hash]/\"}// 如果不知道publicPath, 可以删除它，并在入口配置中设置__webpack_public_path = myRuntimePublicPath","link":"/2017/07/26/webpack/"}],"tags":[{"name":"webpack node","slug":"webpack-node","link":"/tags/webpack-node/"}],"categories":[]}